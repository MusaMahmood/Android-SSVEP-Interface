//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: tf_psd_rescale_w512.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 18-Jan-2018 19:47:33
//

// Include Files
#include "rt_nonfinite.h"
#include "tf_psd_rescale_w512.h"

// Function Declarations
static void fft(const double x[512], creal_T y[512]);
static double mean(const double x[512]);
static void power(const double a[512], double y[512]);
static void repmat(const double a[512], double b[512]);
static void rescale_minmax(const double X[256], double Y[256]);
static double sum(const double x[512]);
static void tf_welch_psd(const double signals[512], double fs, const double
  window[512], double CSM[256]);

// Function Definitions

//
// Arguments    : const double x[512]
//                creal_T y[512]
// Return Type  : void
//
static void fft(const double x[512], creal_T y[512])
{
  int ix;
  int ju;
  int iy;
  int i;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  static const double dv4[257] = { 1.0, 0.9999247018391445, 0.99969881869620425,
    0.99932238458834954, 0.99879545620517241, 0.99811811290014918,
    0.99729045667869021, 0.996312612182778, 0.99518472667219693,
    0.99390697000235606, 0.99247953459871, 0.99090263542778, 0.989176509964781,
    0.98730141815785843, 0.98527764238894122, 0.98310548743121629,
    0.98078528040323043, 0.97831737071962765, 0.97570213003852857,
    0.97293995220556018, 0.970031253194544, 0.96697647104485207,
    0.96377606579543984, 0.96043051941556579, 0.95694033573220882,
    0.95330604035419386, 0.94952818059303667, 0.94560732538052128,
    0.94154406518302081, 0.937339011912575, 0.932992798834739,
    0.92850608047321559, 0.92387953251128674, 0.91911385169005777,
    0.91420975570353069, 0.90916798309052238, 0.90398929312344334,
    0.89867446569395382, 0.89322430119551532, 0.88763962040285393,
    0.881921264348355, 0.8760700941954066, 0.87008699110871146,
    0.8639728561215867, 0.85772861000027212, 0.8513551931052652,
    0.84485356524970712, 0.83822470555483808, 0.83146961230254524,
    0.82458930278502529, 0.81758481315158371, 0.81045719825259477,
    0.80320753148064494, 0.79583690460888357, 0.78834642762660634,
    0.78073722857209449, 0.773010453362737, 0.765167265622459,
    0.75720884650648457, 0.74913639452345937, 0.74095112535495922,
    0.73265427167241282, 0.724247082951467, 0.71573082528381859,
    0.70710678118654757, 0.69837624940897292, 0.68954054473706683,
    0.680600997795453, 0.67155895484701833, 0.66241577759017178,
    0.65317284295377676, 0.64383154288979139, 0.63439328416364549,
    0.62485948814238634, 0.61523159058062682, 0.60551104140432555,
    0.59569930449243336, 0.58579785745643886, 0.57580819141784534,
    0.56573181078361312, 0.55557023301960218, 0.54532498842204646,
    0.53499761988709715, 0.524589682678469, 0.51410274419322166,
    0.50353838372571758, 0.49289819222978404, 0.48218377207912272,
    0.47139673682599764, 0.46053871095824, 0.44961132965460654,
    0.43861623853852766, 0.42755509343028208, 0.41642956009763715,
    0.40524131400498986, 0.3939920400610481, 0.38268343236508978,
    0.37131719395183749, 0.35989503653498811, 0.34841868024943456,
    0.33688985339222005, 0.32531029216226293, 0.31368174039889152,
    0.30200594931922808, 0.29028467725446233, 0.27851968938505306,
    0.26671275747489837, 0.25486565960451457, 0.24298017990326387,
    0.23105810828067111, 0.2191012401568698, 0.20711137619221856,
    0.19509032201612825, 0.18303988795514095, 0.17096188876030122,
    0.15885814333386145, 0.14673047445536175, 0.13458070850712617,
    0.1224106751992162, 0.11022220729388306, 0.0980171403295606,
    0.0857973123444399, 0.073564563599667426, 0.061320736302208578,
    0.049067674327418015, 0.036807222941358832, 0.024541228522912288,
    0.012271538285719925, 0.0, -0.012271538285719925, -0.024541228522912288,
    -0.036807222941358832, -0.049067674327418015, -0.061320736302208578,
    -0.073564563599667426, -0.0857973123444399, -0.0980171403295606,
    -0.11022220729388306, -0.1224106751992162, -0.13458070850712617,
    -0.14673047445536175, -0.15885814333386145, -0.17096188876030122,
    -0.18303988795514095, -0.19509032201612825, -0.20711137619221856,
    -0.2191012401568698, -0.23105810828067111, -0.24298017990326387,
    -0.25486565960451457, -0.26671275747489837, -0.27851968938505306,
    -0.29028467725446233, -0.30200594931922808, -0.31368174039889152,
    -0.32531029216226293, -0.33688985339222005, -0.34841868024943456,
    -0.35989503653498811, -0.37131719395183749, -0.38268343236508978,
    -0.3939920400610481, -0.40524131400498986, -0.41642956009763715,
    -0.42755509343028208, -0.43861623853852766, -0.44961132965460654,
    -0.46053871095824, -0.47139673682599764, -0.48218377207912272,
    -0.49289819222978404, -0.50353838372571758, -0.51410274419322166,
    -0.524589682678469, -0.53499761988709715, -0.54532498842204646,
    -0.55557023301960218, -0.56573181078361312, -0.57580819141784534,
    -0.58579785745643886, -0.59569930449243336, -0.60551104140432555,
    -0.61523159058062682, -0.62485948814238634, -0.63439328416364549,
    -0.64383154288979139, -0.65317284295377676, -0.66241577759017178,
    -0.67155895484701833, -0.680600997795453, -0.68954054473706683,
    -0.69837624940897292, -0.70710678118654757, -0.71573082528381859,
    -0.724247082951467, -0.73265427167241282, -0.74095112535495922,
    -0.74913639452345937, -0.75720884650648457, -0.765167265622459,
    -0.773010453362737, -0.78073722857209449, -0.78834642762660634,
    -0.79583690460888357, -0.80320753148064494, -0.81045719825259477,
    -0.81758481315158371, -0.82458930278502529, -0.83146961230254524,
    -0.83822470555483808, -0.84485356524970712, -0.8513551931052652,
    -0.85772861000027212, -0.8639728561215867, -0.87008699110871146,
    -0.8760700941954066, -0.881921264348355, -0.88763962040285393,
    -0.89322430119551532, -0.89867446569395382, -0.90398929312344334,
    -0.90916798309052238, -0.91420975570353069, -0.91911385169005777,
    -0.92387953251128674, -0.92850608047321559, -0.932992798834739,
    -0.937339011912575, -0.94154406518302081, -0.94560732538052128,
    -0.94952818059303667, -0.95330604035419386, -0.95694033573220882,
    -0.96043051941556579, -0.96377606579543984, -0.96697647104485207,
    -0.970031253194544, -0.97293995220556018, -0.97570213003852857,
    -0.97831737071962765, -0.98078528040323043, -0.98310548743121629,
    -0.98527764238894122, -0.98730141815785843, -0.989176509964781,
    -0.99090263542778, -0.99247953459871, -0.99390697000235606,
    -0.99518472667219693, -0.996312612182778, -0.99729045667869021,
    -0.99811811290014918, -0.99879545620517241, -0.99932238458834954,
    -0.99969881869620425, -0.9999247018391445, -1.0 };

  double twid_im;
  static const double dv5[257] = { 0.0, -0.012271538285719925,
    -0.024541228522912288, -0.036807222941358832, -0.049067674327418015,
    -0.061320736302208578, -0.073564563599667426, -0.0857973123444399,
    -0.0980171403295606, -0.11022220729388306, -0.1224106751992162,
    -0.13458070850712617, -0.14673047445536175, -0.15885814333386145,
    -0.17096188876030122, -0.18303988795514095, -0.19509032201612825,
    -0.20711137619221856, -0.2191012401568698, -0.23105810828067111,
    -0.24298017990326387, -0.25486565960451457, -0.26671275747489837,
    -0.27851968938505306, -0.29028467725446233, -0.30200594931922808,
    -0.31368174039889152, -0.32531029216226293, -0.33688985339222005,
    -0.34841868024943456, -0.35989503653498811, -0.37131719395183749,
    -0.38268343236508978, -0.3939920400610481, -0.40524131400498986,
    -0.41642956009763715, -0.42755509343028208, -0.43861623853852766,
    -0.44961132965460654, -0.46053871095824, -0.47139673682599764,
    -0.48218377207912272, -0.49289819222978404, -0.50353838372571758,
    -0.51410274419322166, -0.524589682678469, -0.53499761988709715,
    -0.54532498842204646, -0.55557023301960218, -0.56573181078361312,
    -0.57580819141784534, -0.58579785745643886, -0.59569930449243336,
    -0.60551104140432555, -0.61523159058062682, -0.62485948814238634,
    -0.63439328416364549, -0.64383154288979139, -0.65317284295377676,
    -0.66241577759017178, -0.67155895484701833, -0.680600997795453,
    -0.68954054473706683, -0.69837624940897292, -0.70710678118654757,
    -0.71573082528381859, -0.724247082951467, -0.73265427167241282,
    -0.74095112535495922, -0.74913639452345937, -0.75720884650648457,
    -0.765167265622459, -0.773010453362737, -0.78073722857209449,
    -0.78834642762660634, -0.79583690460888357, -0.80320753148064494,
    -0.81045719825259477, -0.81758481315158371, -0.82458930278502529,
    -0.83146961230254524, -0.83822470555483808, -0.84485356524970712,
    -0.8513551931052652, -0.85772861000027212, -0.8639728561215867,
    -0.87008699110871146, -0.8760700941954066, -0.881921264348355,
    -0.88763962040285393, -0.89322430119551532, -0.89867446569395382,
    -0.90398929312344334, -0.90916798309052238, -0.91420975570353069,
    -0.91911385169005777, -0.92387953251128674, -0.92850608047321559,
    -0.932992798834739, -0.937339011912575, -0.94154406518302081,
    -0.94560732538052128, -0.94952818059303667, -0.95330604035419386,
    -0.95694033573220882, -0.96043051941556579, -0.96377606579543984,
    -0.96697647104485207, -0.970031253194544, -0.97293995220556018,
    -0.97570213003852857, -0.97831737071962765, -0.98078528040323043,
    -0.98310548743121629, -0.98527764238894122, -0.98730141815785843,
    -0.989176509964781, -0.99090263542778, -0.99247953459871,
    -0.99390697000235606, -0.99518472667219693, -0.996312612182778,
    -0.99729045667869021, -0.99811811290014918, -0.99879545620517241,
    -0.99932238458834954, -0.99969881869620425, -0.9999247018391445, -1.0,
    -0.9999247018391445, -0.99969881869620425, -0.99932238458834954,
    -0.99879545620517241, -0.99811811290014918, -0.99729045667869021,
    -0.996312612182778, -0.99518472667219693, -0.99390697000235606,
    -0.99247953459871, -0.99090263542778, -0.989176509964781,
    -0.98730141815785843, -0.98527764238894122, -0.98310548743121629,
    -0.98078528040323043, -0.97831737071962765, -0.97570213003852857,
    -0.97293995220556018, -0.970031253194544, -0.96697647104485207,
    -0.96377606579543984, -0.96043051941556579, -0.95694033573220882,
    -0.95330604035419386, -0.94952818059303667, -0.94560732538052128,
    -0.94154406518302081, -0.937339011912575, -0.932992798834739,
    -0.92850608047321559, -0.92387953251128674, -0.91911385169005777,
    -0.91420975570353069, -0.90916798309052238, -0.90398929312344334,
    -0.89867446569395382, -0.89322430119551532, -0.88763962040285393,
    -0.881921264348355, -0.8760700941954066, -0.87008699110871146,
    -0.8639728561215867, -0.85772861000027212, -0.8513551931052652,
    -0.84485356524970712, -0.83822470555483808, -0.83146961230254524,
    -0.82458930278502529, -0.81758481315158371, -0.81045719825259477,
    -0.80320753148064494, -0.79583690460888357, -0.78834642762660634,
    -0.78073722857209449, -0.773010453362737, -0.765167265622459,
    -0.75720884650648457, -0.74913639452345937, -0.74095112535495922,
    -0.73265427167241282, -0.724247082951467, -0.71573082528381859,
    -0.70710678118654757, -0.69837624940897292, -0.68954054473706683,
    -0.680600997795453, -0.67155895484701833, -0.66241577759017178,
    -0.65317284295377676, -0.64383154288979139, -0.63439328416364549,
    -0.62485948814238634, -0.61523159058062682, -0.60551104140432555,
    -0.59569930449243336, -0.58579785745643886, -0.57580819141784534,
    -0.56573181078361312, -0.55557023301960218, -0.54532498842204646,
    -0.53499761988709715, -0.524589682678469, -0.51410274419322166,
    -0.50353838372571758, -0.49289819222978404, -0.48218377207912272,
    -0.47139673682599764, -0.46053871095824, -0.44961132965460654,
    -0.43861623853852766, -0.42755509343028208, -0.41642956009763715,
    -0.40524131400498986, -0.3939920400610481, -0.38268343236508978,
    -0.37131719395183749, -0.35989503653498811, -0.34841868024943456,
    -0.33688985339222005, -0.32531029216226293, -0.31368174039889152,
    -0.30200594931922808, -0.29028467725446233, -0.27851968938505306,
    -0.26671275747489837, -0.25486565960451457, -0.24298017990326387,
    -0.23105810828067111, -0.2191012401568698, -0.20711137619221856,
    -0.19509032201612825, -0.18303988795514095, -0.17096188876030122,
    -0.15885814333386145, -0.14673047445536175, -0.13458070850712617,
    -0.1224106751992162, -0.11022220729388306, -0.0980171403295606,
    -0.0857973123444399, -0.073564563599667426, -0.061320736302208578,
    -0.049067674327418015, -0.036807222941358832, -0.024541228522912288,
    -0.012271538285719925, -0.0 };

  int ihi;
  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 511; i++) {
    y[iy].re = x[ix];
    y[iy].im = 0.0;
    iy = 512;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy].re = x[ix];
  y[iy].im = 0.0;
  for (i = 0; i <= 511; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 128;
  iheight = 509;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 256; j += ju) {
      twid_re = dv4[j];
      twid_im = dv5[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }
}

//
// Arguments    : const double x[512]
// Return Type  : double
//
static double mean(const double x[512])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 511; k++) {
    y += x[k + 1];
  }

  y /= 512.0;
  return y;
}

//
// Arguments    : const double a[512]
//                double y[512]
// Return Type  : void
//
static void power(const double a[512], double y[512])
{
  int k;
  for (k = 0; k < 512; k++) {
    y[k] = a[k] * a[k];
  }
}

//
// Arguments    : const double a[512]
//                double b[512]
// Return Type  : void
//
static void repmat(const double a[512], double b[512])
{
  memcpy(&b[0], &a[0], sizeof(double) << 9);
}

//
// Arguments    : const double X[256]
//                double Y[256]
// Return Type  : void
//
static void rescale_minmax(const double X[256], double Y[256])
{
  int ixstart;
  double mtmp;
  int ix;
  boolean_T exitg1;
  double b_mtmp;
  ixstart = 1;
  mtmp = X[0];
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 257)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        mtmp = X[ix - 1];
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 256) {
    while (ixstart + 1 < 257) {
      if (X[ixstart] < mtmp) {
        mtmp = X[ixstart];
      }

      ixstart++;
    }
  }

  ixstart = 1;
  b_mtmp = X[0];
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 257)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        b_mtmp = X[ix - 1];
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 256) {
    while (ixstart + 1 < 257) {
      if (X[ixstart] > b_mtmp) {
        b_mtmp = X[ixstart];
      }

      ixstart++;
    }
  }

  b_mtmp -= mtmp;
  for (ixstart = 0; ixstart < 256; ixstart++) {
    Y[ixstart] = (X[ixstart] - mtmp) / b_mtmp;
  }
}

//
// Arguments    : const double x[512]
// Return Type  : double
//
static double sum(const double x[512])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 511; k++) {
    y += x[k + 1];
  }

  return y;
}

//
// if size(signals,2) > size(signals,1)
//      signals = signals.';
//  end
// Arguments    : const double signals[512]
//                double fs
//                const double window[512]
//                double CSM[256]
// Return Type  : void
//
static void tf_welch_psd(const double signals[512], double fs, const double
  window[512], double CSM[256])
{
  double data_taper[512];
  double a;
  int i;
  double b_signals[512];
  creal_T Data_Block[512];
  double dv3[512];

  //  Function for spectra estimation by Welch's method
  //  Developed by Luiz A. Baccala, Fl?vio Caduda and Luciano Caldas, all from
  //  Escola Polit?cnica - Poli-USP, with cooperation of Carlos Pagani and Felipe 
  //  Amaral from Escola de Engenharia de S?o Carlos - EESC-USP.
  //
  //  Cross-spectra matrix are estimated by Welch's method with 50% overlap and
  //  the window energy loss are compasated by a factor of 1/sum(Wi.^2) where
  //  Wi are the elements of the window [1]. Then, the spectra becomes:
  //  Sxy = fft(x)*conj(fft(y))/sum(Wi.^2)
  //
  //  Code was tested with a known- spectra signal from a white noise filtered
  //  by a filter. The variance (power) of the signal checks with the integral
  //  of the PSD estimated.
  //
  //  INPUT:
  //  -- signals: matrix of signals to perform the spectra estimatino. Size is
  //  [Samples x number of sensors];
  //  -- fs: samplerate in Hertz;
  //  -- window: data taper desired. Must be a vector. For best performance it
  //  should be a power of 2. For general applications do: window=hanning(1024); 
  //
  //  OUTPUT:
  //  -- CSM: Cross Spectral Matrix: Unilateral (0:fs/2) spectra. Welch's
  //  method is used with 50% overlap. Matrix size: sensors x sensors x
  //  windowsize/2
  //  -- frequencies: vector with all frequencies corresponding to each layer
  //  (3rd layer in depth) of CSM.
  //
  //  LAST REVISION: Aug - 18 - 2016
  //  ADDED 'fs' missing term in line 82, for calibration factor
  //  [1] Trobs,M.; Heinzel,G. "Improved spectrum estimation from digitized
  //  time series on a logarithmic frequency axis"
  //  doi:10.1016/j.measurement.2005.10.010
  //  frequencies = (0:(windowsize/2-1))*fs/windowsize;
  // must be even, best if 2^n
  // ORIGINAL;
  repmat(window, data_taper);

  //  Data segmentation into blocks of size block_samples:
  // ORIGINAL
  //  S = zeros(ceil(block_samples/2),number_of_signals.^2);
  //  Retrieve current data block
  a = mean(signals);

  // Taper it
  for (i = 0; i < 512; i++) {
    b_signals[i] = (signals[i] - a) * data_taper[i];
  }

  fft(b_signals, Data_Block);

  // FFT it,
  //  bilateral DFT
  //  viii
  // ORIGINAL
  //  Data_Block = Data_Block(1:ceil(block_samples/2),:);
  // All spectral combinations:
  // ORIGINAL
  //  P = zeros(ceil(block_samples/2)/2,number_of_signals.^2);
  //  THIS IS FOR WIND TUNNEL EESC-USP BEAMFORMING CODE
  //              P(:,c) = real(Data_Block(:,b).*conj(Data_Block(:,aa)));
  //  P(:,c) = Data_Block(:,b).*conj(Data_Block(:,aa));
  //  IS FOR FAN RIG BEAMFORMING CODE
  //  P(:,c) = Data_Block(:,aa).*conj(Data_Block(:,b)); % THIS IS THE ORIGINAL LINE 
  //  Sum the spectrums up ...
  power(window, dv3);
  a = sum(dv3) * fs;

  //  Average them out
  //  for a = 1:sensors
  for (i = 0; i < 256; i++) {
    CSM[i] = (Data_Block[i].re * Data_Block[i].re - Data_Block[i].im *
              -Data_Block[i].im) * 2.0 / a;
  }

  //  end
  //  clear S
  CSM[0] = (CSM[0] + CSM[0]) - CSM[0];
}

//
// tf_psd_rescale_w256 TF Preprocessing
//  input should be X = (512, 2), or X = (1024, 1);
//  Output is Y = (2, 256) float32
//  X = single(X);
// Arguments    : const double X[1024]
//                float Y[512]
// Return Type  : void
//
void tf_psd_rescale_w512(const double X[1024], float Y[512])
{
  static const double dv0[512] = { 0.0, 3.7796577274096244E-5,
    0.00015118059477142731, 0.00034013491038087373, 0.00060463095679685885,
    0.00094462874583833845, 0.0013600768744944647, 0.0018509125326960918,
    0.00241706151281168, 0.0030584382208665439, 0.0037749456894833888,
    0.00456647559254264, 0.0054329082615597324, 0.0063741127037773015,
    0.0073899466219696786, 0.0084802564359560684, 0.0096448773058199766,
    0.010883633156830497, 0.012196336706062738, 0.013582789490712122,
    0.015042781898099433, 0.016576093197361252, 0.018182491572821535,
    0.019861734159038968, 0.021613567077524876, 0.023437725475126125,
    0.025333933564067435, 0.02730190466364657, 0.029341341243576458,
    0.031451934968968087, 0.033633366746946, 0.035885306774891212,
    0.038207414590302524, 0.040599339122270095, 0.043060718744552196,
    0.045591181330248531, 0.048190344308060407, 0.050857814720130512,
    0.053593189281452569, 0.056396054440842724, 0.059265986443462593,
    0.062202551394885286, 0.0652053053266945, 0.06827379426360608,
    0.071407554292103159, 0.074606111630573457, 0.077868982700938449,
    0.0811956742017641, 0.084585683182840765, 0.088038497121222858,
    0.091553593998715044, 0.095130442380794267, 0.098768501496955485,
    0.10246722132246855, 0.10622604266153479, 0.11004439723182935,
    0.11392170775041788, 0.1178573880210339, 0.12185084302270349,
    0.12590146899970439, 0.13000865355284569, 0.13417177573205397,
    0.13839020613025255, 0.14266330697851953, 0.14699043224250907,
    0.15137092772012367, 0.15580413114041997, 0.16028937226373541,
    0.16482597298301915, 0.16941324742635255, 0.17405050206064371,
    0.17873703579648026, 0.18347214009412405, 0.1882550990706332,
    0.19308518960809357, 0.19796168146294407, 0.20288383737637988,
    0.20785091318581578, 0.21286215793739288, 0.21791681399951346,
    0.22301411717738356, 0.22815329682854946, 0.23333357597940785,
    0.23855417144267393, 0.24381429393578824, 0.24911314820024566,
    0.25444993312182745, 0.25982384185171903, 0.26523406192849397,
    0.27067977540094756, 0.27616015895175938, 0.28167438402196809,
    0.28722161693623766, 0.29280101902889821, 0.29841174677074034,
    0.30405295189654535, 0.30972378153333141, 0.31542337832929634,
    0.32115088058343716, 0.32690542237582787, 0.332686133698534,
    0.33849214058714694, 0.3443225652529146, 0.35017652621545126,
    0.3560531384360055, 0.36195151345126558, 0.36787075950768328,
    0.37380998169629476, 0.37976828208801833, 0.38574475986940937,
    0.39173851147885075, 0.39774863074315892, 0.403774209014585,
    0.40981433530819011, 0.41586809643957334, 0.42193457716293326,
    0.42801286030943986, 0.43410202692589872, 0.44020115641368357,
    0.44630932666791845, 0.45242561421688732, 0.45854909436165042,
    0.46467884131584553, 0.470813928345655, 0.476953427909915,
    0.48309641180034668, 0.48924195128188885, 0.49538911723310969,
    0.5015369802866777, 0.507684610969869, 0.513831079845091,
    0.51997545765040043, 0.52611681543999511, 0.53225422472465811,
    0.53838675761213217, 0.54451348694740465, 0.55063348645288068,
    0.55674583086842311, 0.56284959609124, 0.56894385931559555,
    0.57502769917232632, 0.58110019586813921, 0.58716043132467188,
    0.59320748931729328, 0.59924045561362471, 0.60525841811175873,
    0.61126046697815717, 0.617245694785205, 0.62321319664840058,
    0.629162070363163, 0.6350914165412318, 0.64100033874664319,
    0.64688794363125812, 0.65275334106982486, 0.658595644294553,
    0.66441397002918134, 0.67020743862251719, 0.67597517418142694,
    0.68171630470325972, 0.6874299622076816, 0.69311528286790314,
    0.69877140714127783, 0.70439747989925294, 0.70999265055665339,
    0.715556073200279, 0.72108690671679387, 0.72658431491989317,
    0.73204746667672, 0.73747553603352523, 0.74286770234053645,
    0.74822315037603238, 0.7535410704695904, 0.7588206586245,
    0.76406111663931409, 0.7692616522285276, 0.77442147914235948,
    0.77953981728562316, 0.78461589283566591, 0.78964893835936056,
    0.79463819292913085, 0.79958290223799355, 0.80448231871359832,
    0.80933570163125168, 0.81414231722590369, 0.8189014388030833,
    0.82361234684876461, 0.828274329138148, 0.83288668084333783,
    0.83744870463990351, 0.84195971081230536, 0.84641901735816982,
    0.85082595009139883, 0.85517984274409842, 0.85948003706730813,
    0.86372588293051966, 0.8679167384199683, 0.87205196993568013,
    0.87613095228726556, 0.8801530687884378, 0.88411771135024808,
    0.88802428057302063, 0.8918721858369737, 0.89566084539151236,
    0.89938968644318251, 0.90305814524226791, 0.906665667168023,
    0.91021170681252261, 0.913695728063121, 0.91711720418350484,
    0.92047561789332744, 0.9237704614464155, 0.92700123670753354,
    0.93016745522769417, 0.93326863831800544, 0.9363043171220421,
    0.93927403268673038, 0.9421773360317347, 0.94501378821733839,
    0.94778296041080434, 0.95048443395120952, 0.9531178004127403,
    0.95568266166644067, 0.95817862994040448, 0.96060532787840081,
    0.962962388596925, 0.96524945574066656, 0.9674661835363858,
    0.96961223684518849, 0.9716872912131963, 0.97369103292059767,
    0.97562315902907992, 0.97748337742762759, 0.97927140687668712,
    0.98098697705068549, 0.98262982857890013, 0.984199713084672,
    0.985696393222957, 0.98711964271620922, 0.98846924638859091,
    0.98974500019850375, 0.99094671126943834, 0.992074197919133,
    0.99312728968704256, 0.99410582736010955, 0.99500966299683513,
    0.99583865994964493, 0.99659269288554975, 0.99727164780509292,
    0.997875422059586, 0.99840392436662828, 0.99885707482390618,
    0.99923480492127492, 0.999537057551115, 0.99976378701696711,
    0.99991495904043992, 0.99999055076639354, 0.99999055076639354,
    0.99991495904043992, 0.99976378701696711, 0.999537057551115,
    0.99923480492127492, 0.99885707482390618, 0.99840392436662828,
    0.997875422059586, 0.99727164780509292, 0.99659269288554975,
    0.99583865994964493, 0.995009662996835, 0.99410582736010966,
    0.99312728968704256, 0.992074197919133, 0.99094671126943834,
    0.98974500019850375, 0.98846924638859091, 0.98711964271620922,
    0.9856963932229571, 0.984199713084672, 0.98262982857890013,
    0.98098697705068549, 0.97927140687668723, 0.9774833774276277,
    0.97562315902908, 0.97369103292059789, 0.9716872912131963,
    0.9696122368451886, 0.9674661835363858, 0.96524945574066656,
    0.962962388596925, 0.96060532787840081, 0.95817862994040459,
    0.95568266166644067, 0.9531178004127403, 0.95048443395120952,
    0.94778296041080445, 0.94501378821733828, 0.9421773360317347,
    0.93927403268673038, 0.93630431712204221, 0.93326863831800533,
    0.93016745522769417, 0.92700123670753376, 0.92377046144641561,
    0.92047561789332755, 0.917117204183505, 0.91369572806312127,
    0.91021170681252261, 0.9066656671680231, 0.90305814524226791,
    0.89938968644318251, 0.89566084539151247, 0.89187218583697381,
    0.88802428057302074, 0.88411771135024808, 0.8801530687884378,
    0.87613095228726579, 0.87205196993568024, 0.86791673841996841,
    0.86372588293051988, 0.85948003706730824, 0.85517984274409853,
    0.850825950091399, 0.84641901735816971, 0.84195971081230536,
    0.83744870463990351, 0.832886680843338, 0.828274329138148, 0.823612346848765,
    0.8189014388030833, 0.81414231722590391, 0.80933570163125168,
    0.80448231871359877, 0.79958290223799366, 0.79463819292913085,
    0.78964893835936056, 0.78461589283566591, 0.77953981728562338,
    0.77442147914235959, 0.76926165222852783, 0.76406111663931431,
    0.75882065862450032, 0.75354107046959051, 0.74822315037603249,
    0.74286770234053678, 0.73747553603352511, 0.73204746667672016,
    0.72658431491989284, 0.72108690671679443, 0.715556073200279,
    0.70999265055665373, 0.70439747989925294, 0.69877140714127828,
    0.69311528286790325, 0.68742996220768182, 0.6817163047032595,
    0.675975174181427, 0.67020743862251742, 0.66441397002918134,
    0.65859564429455342, 0.652753341069825, 0.64688794363125846,
    0.64100033874664319, 0.63509141654123225, 0.62916207036316307,
    0.62321319664840036, 0.61724569478520486, 0.61126046697815728,
    0.605258418111759, 0.5992404556136246, 0.59320748931729328,
    0.58716043132467211, 0.58110019586813955, 0.57502769917232632,
    0.56894385931559566, 0.56284959609124019, 0.556745830868423,
    0.55063348645288068, 0.54451348694740442, 0.5383867576121325,
    0.53225422472465811, 0.52611681543999533, 0.51997545765040032,
    0.51383107984509147, 0.50768461096986917, 0.50153698028667792,
    0.49538911723311, 0.48924195128188891, 0.48309641180034696,
    0.47695342790991496, 0.47081392834565544, 0.46467884131584553,
    0.45854909436165053, 0.45242561421688721, 0.44630932666791889,
    0.44020115641368368, 0.43410202692589894, 0.4280128603094398,
    0.42193457716293331, 0.41586809643957356, 0.40981433530819,
    0.40377420901458505, 0.397748630743159, 0.391738511478851,
    0.38574475986940937, 0.37976828208801844, 0.373809981696295,
    0.36787075950768361, 0.36195151345126558, 0.35605313843600522,
    0.35017652621545159, 0.3443225652529146, 0.33849214058714705,
    0.33268613369853423, 0.32690542237582815, 0.32115088058343727,
    0.31542337832929657, 0.30972378153333174, 0.3040529518965453,
    0.29841174677074039, 0.292801019028898, 0.287221616936238,
    0.28167438402196809, 0.27616015895175949, 0.2706797754009474,
    0.2652340619284943, 0.25982384185171914, 0.25444993312182768,
    0.24911314820024555, 0.24381429393578824, 0.23855417144267405,
    0.23333357597940774, 0.22815329682854946, 0.22301411717738368,
    0.21791681399951368, 0.21286215793739288, 0.20785091318581583,
    0.20288383737638011, 0.19796168146294435, 0.19308518960809357,
    0.18825509907063331, 0.18347214009412421, 0.17873703579648015,
    0.17405050206064376, 0.16941324742635266, 0.16482597298301932,
    0.16028937226373541, 0.15580413114042008, 0.15137092772012384,
    0.14699043224250935, 0.14266330697851959, 0.13839020613025244,
    0.13417177573205419, 0.13000865355284569, 0.1259014689997045,
    0.12185084302270338, 0.11785738802103413, 0.11392170775041793,
    0.11004439723182946, 0.10622604266153474, 0.10246722132246883,
    0.098768501496955541, 0.095130442380794156, 0.091553593998715044,
    0.088038497121222914, 0.084585683182840876, 0.081195674201764045,
    0.077868982700938727, 0.074606111630573513, 0.07140755429210327,
    0.06827379426360608, 0.065205305326694774, 0.0622025513948854,
    0.059265986443462537, 0.056396054440842724, 0.05359318928145268,
    0.050857814720130623, 0.048190344308060407, 0.045591181330248587,
    0.043060718744552307, 0.040599339122270206, 0.038207414590302524,
    0.035885306774891268, 0.033633366746946114, 0.031451934968968032,
    0.029341341243576513, 0.027301904663646459, 0.025333933564067546,
    0.023437725475126125, 0.021613567077524931, 0.019861734159038913,
    0.018182491572821646, 0.016576093197361252, 0.015042781898099378,
    0.013582789490712233, 0.012196336706062794, 0.010883633156830552,
    0.0096448773058199211, 0.00848025643595618, 0.0073899466219696786,
    0.0063741127037773571, 0.0054329082615597324, 0.0045664755925427514,
    0.0037749456894834443, 0.0030584382208665439, 0.00241706151281168,
    0.0018509125326961473, 0.0013600768744944647, 0.00094462874583833845,
    0.00060463095679685885, 0.00034013491038087373, 0.00015118059477142731,
    3.7796577274096244E-5, 0.0 };

  double dv1[256];
  double dv2[256];
  int i0;

  //  Y = single(zeros(2, 256));
  tf_welch_psd(*(double (*)[512])&X[0], 250.0, dv0, dv1);
  rescale_minmax(dv1, dv2);
  for (i0 = 0; i0 < 256; i0++) {
    Y[i0] = (float)dv2[i0];
  }

  tf_welch_psd(*(double (*)[512])&X[512], 250.0, dv0, dv1);
  rescale_minmax(dv1, dv2);
  for (i0 = 0; i0 < 256; i0++) {
    Y[256 + i0] = (float)dv2[i0];
  }
}

//
// Arguments    : void
// Return Type  : void
//
void tf_psd_rescale_w512_initialize()
{
  rt_InitInfAndNaN(8U);
}

//
// Arguments    : void
// Return Type  : void
//
void tf_psd_rescale_w512_terminate()
{
  // (no terminate code required)
}

//
// File trailer for tf_psd_rescale_w512.cpp
//
// [EOF]
//
